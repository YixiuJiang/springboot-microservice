package spaceshuttle.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import spaceshuttle.model.APIResponse;
import spaceshuttle.model.User;
import spaceshuttle.repository.UserRepository;

@RestController
@RequestMapping(path = "/users") // This means URL's start with /user (after Application path)

public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping
    public @ResponseBody
    APIResponse addUser(@RequestBody User newUser) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        APIResponse apiResponse = new APIResponse();
        apiResponse.setSuccess(true);
        apiResponse.setResponseObject(userRepository.save(newUser));
        return apiResponse;
    }

    @GetMapping(value = "/{id}")
    public APIResponse getUserById(@PathVariable("id") Long id) {
        APIResponse apiResponse = new APIResponse();
        apiResponse.setSuccess(true);
        apiResponse.setResponseObject(userRepository.findOne(id));
        return apiResponse;

    }

    @DeleteMapping(value = "/{id}")
    public APIResponse deleteUserById(@PathVariable("id") Long id) {
        userRepository.delete(id);
        APIResponse apiResponse = new APIResponse();
        apiResponse.setSuccess(true);
        return apiResponse;
    }

    @PutMapping(value = "/{id}")
    public APIResponse updateUser(@PathVariable("id") Long id, @RequestBody User user) {
        User oldUser = userRepository.findById(id);
        oldUser.setUsername(user.getUsername());
        oldUser.setPassword(user.getPassword());
        User newUser = userRepository.save(oldUser);
        APIResponse apiResponse = new APIResponse();
        apiResponse.setSuccess(true);
        apiResponse.setResponseObject(newUser);
        return apiResponse;
    }

    //Get User by Id
    @GetMapping(path = "/{id}")
    public @ResponseBody
    User getUserById(@PathVariable Long id){
        return userRepository.findOne(id);
    }

    //Update User By Id
    @PutMapping(path = "/{id}")
    public @ResponseBody
    void updateUserById(@PathVariable Long id,@RequestParam String username,@RequestParam String password){
        User user = userRepository.findOne(id);
        user.setPassword(password);
        user.setUsername(username);
    }

    //Delete User By Id
    @DeleteMapping(path = "/{id}")
    public @ResponseBody
    void deleteUserById(@PathVariable Long id){
        userRepository.delete(id);
    }
}