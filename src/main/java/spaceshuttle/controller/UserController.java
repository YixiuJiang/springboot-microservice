package spaceshuttle.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import spaceshuttle.model.User;
import spaceshuttle.repository.UserRepository;

@RestController
@RequestMapping(path = "/users") // This means URL's start with /user (after Application path)

public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @RequestMapping("/hello")
    public String hello() {
        return "Greetings from Spring Boot!";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @RequestMapping(path = "/add/{username},{password}") // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser(@PathVariable(value="username") String username
            , @PathVariable(value="password")  String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User newUser = new User();
        newUser.setUsername(username);
        newUser.setPassword(password);
        userRepository.save(newUser);
        return "Saved";
    }


     /*
        homework
        get user by id
     */
    @GetMapping(path="/get/{userId}")
    public @ResponseBody
    User getUserById(@PathVariable(value = "userId") Long id){
        return  userRepository.findOne(id);
    }


    /*
        homework
        update user by id
     */
    @PutMapping(path="/update/{userId},{userName},{userPassword}")
    public @ResponseBody
    String updateUserById(@PathVariable(value = "userId") Long id,@PathVariable(value = "userName")String userName,
                        @PathVariable(value = "userPassword")String password){
        User user = userRepository.findOne(id);
        user.setUsername(userName);
        user.setPassword(password);
        userRepository.save(user);
        return "Saved";
    }


    /*
        Homework
        Delete User by Id
     */
    @DeleteMapping(path = "/delete/{userId}")
    public User delete(@PathVariable Long id){
        User user = userRepository.findOne(id);
        userRepository.delete(user);
        return user;
    }


    @PostMapping// Map ONLY GET Requests
    public @ResponseBody
    User addUser(@RequestBody User newUser) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        return userRepository.save(newUser);
    }
}