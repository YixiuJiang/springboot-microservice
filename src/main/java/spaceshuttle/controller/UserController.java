package spaceshuttle.controller;

import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import spaceshuttle.model.User;
import spaceshuttle.repository.UserRepository;

@RestController
@RequestMapping(path = "/users") // This means URL's start with /user (after Application path)

public class UserController {

    private static final String RESULT_SUCCESS = "success";
    private static final String RESULT_FAILURE = "failed";

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @RequestMapping("/hello")
    public String hello() {
        return "Greetings from Spring Boot!";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping// Map ONLY GET Requests
    public @ResponseBody
    String addNewUser(@RequestParam String username,
                      @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User newUser = new User();
        newUser.setUsername(username);
        newUser.setPassword(password);
        userRepository.save(newUser);
        return "Saved";
    }

    @PostMapping// Map ONLY GET Requests
    public @ResponseBody
    User addUser(@RequestBody User newUser) {
        // @ResponseBody means the returned String is the response, not a view name

        // @RequestParam means it is a parameter from the GET or POST request
        return userRepository.save(newUser);
    }

    @RequestMapping(method = RequestMethod.GET, value = "/{id}")
    public @ResponseBody
    User findUserById(@PathVariable Long id){
        return userRepository.findOne(id);
    }

    @RequestMapping(method = RequestMethod.PUT, value = "/{id}")
    public @ResponseBody
    String updateUserById(@PathVariable Long id,
                          @RequestParam String username,
                          @RequestParam String password){
        User user = userRepository.findOne(id);
        user.setUsername(username);
        user.setPassword(password);
        userRepository.save(user);
        return "Manipulation on User" + " " + id + " " + RESULT_SUCCESS;
    }

    @RequestMapping(method = RequestMethod.DELETE, value = "/{id}")
    public @ResponseBody
    String deleteUser(@PathVariable long id){
        try{
            userRepository.delete(id);
            return "Manipulation on User" + " " + id + " " + RESULT_SUCCESS;
        } catch (Exception e){
            e.printStackTrace();
            return "Manipulation on User" + " " + id + " " + RESULT_FAILURE;
        }

    }

}