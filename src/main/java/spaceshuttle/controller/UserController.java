package spaceshuttle.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import spaceshuttle.model.APIResponse;
import spaceshuttle.model.User;
import spaceshuttle.repository.UserRepository;

@RestController
@RequestMapping(path = "/users") // This means URL's start with /user (after Application path)

public class UserController {

    private APIResponse apiResponse = new APIResponse();

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @RequestMapping("/hello")
    public String hello() {
        return "Greetings from Spring Boot!";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }


    // Homework: get user by Id

    @GetMapping("/{id}")
    public APIResponse getUserById(@PathVariable("id") Long userId) {
        apiResponse.clearAll();
        User targetUser = userRepository.findByUserId(userId);

        if (targetUser != null) {
            apiResponse.setSuccess(true);
            apiResponse.setResponseObject(targetUser);
        } else {
            apiResponse.setSuccess(false);
            apiResponse.setErrorMessage("The user id does not exist");
        }

        return apiResponse;
    }

    // Homework: delete user by id
    @DeleteMapping("/{id}")
    public APIResponse deleteUserById(@PathVariable("id") Long userId) {
        apiResponse.clearAll();
        User targetUser = userRepository.findByUserId(userId);

        if (targetUser != null) {
            apiResponse.setSuccess(true);
            apiResponse.setResponseObject(targetUser);
            userRepository.delete(userId);
        } else {
            apiResponse.setSuccess(false);
            apiResponse.setErrorMessage("The user id does not exist");
        }

        return apiResponse;
    }

    // Homework: update user info
    @PutMapping("/{id}")
    public APIResponse updateUser(@PathVariable("id") Long userId
            , @RequestBody String username, @RequestBody String password) {
        apiResponse.clearAll();
        User targetUser = userRepository.findByUserId(userId);

        if (targetUser != null) {
            targetUser.setPassword(password);
            targetUser.setUsername(username);
            userRepository.save(targetUser);
            apiResponse.setSuccess(true);
        } else {
            apiResponse.setSuccess(false);
            apiResponse.setErrorMessage("The user id does not exist");
        }

        return apiResponse;
    }


    @PostMapping(consumes = MediaType.APPLICATION_XML_VALUE) // Map ONLY GET Requests
    public @ResponseBody
    APIResponse addNewUser(@RequestParam String username
            , @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User newUser = new User();
        newUser.setUsername(username);
        newUser.setPassword(password);
        userRepository.save(newUser);
        APIResponse apiResponse = new APIResponse();
        apiResponse.setSuccess(true);
        return apiResponse;
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)// Map ONLY GET Requests
    public @ResponseBody
    User addUser(@RequestBody User newUser) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        return userRepository.save(newUser);
    }
}